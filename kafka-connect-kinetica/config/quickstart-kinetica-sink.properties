## Connector API required config
# unique connector name
name = KineticaQuickStartSinkConnector

# Connector class
connector.class = com.kinetica.kafka.KineticaSinkConnector

# maximum number of worker tasks
tasks.max = 1

## Kinetica specific config
# Kinetica URL, e.g. 'http://localhost:9191'
kinetica.url = http://127.0.0.1:9191

# Kinetica username (optional)
# kinetica.username =
# Kinetica password (optional)
# kinetica.password =

# Kinetica connection timeout (ms), 0 for limitless timeout
kinetica.timeout = 1000
# Number of retries to insert records into Kinetica table
kinetica.retry_count = 3
# Batch size
kinetica.batch_size = 100

# Kinetica collection name for the table to be placed in
kinetica.tables.schema_name = TEST

# Kinetica table name prefix (optional)
kinetica.tables.prefix = out

# Allow connector to create Kinetica tables
kinetica.tables.create_table = true
# Allow UPSERT of data into Kinetica table on existing PK,
# defaults to false (optional)
kinetica.tables.update_on_existing_pk = true

# When Single table per topic, allows Connector to overwrite
# table name(s) generated from `topics` parameter.
# This parameter is ignored for topics defined through `topics.regex`.
# Multiple topics defined as a comma-separated list should have multiple
# override table names, also comma-separated
# kinetica.tables.destination_name = table_name

# When true, connector supports schema evolution and might require further
# configuration through `kinetica.schema_evolution.add_new_fields_as_columns`,
# `kinetica.schema_evolution.make_missing_field_nullable` and `kinetica.tables.create_table` parameters
# When false, allows so-called `table replication` scenario when a single topic
# allows to synchronize multiple tables from one environment into another
# (default = false)
kinetica.tables.single_table_per_topic = false


## Schema Evolution support-related parameters

# When true, Connector supports schema evolution and would
# require Schema Registry running on Kafka stack,
# and Schema Registry URL:port to be configured in
# connect-standalone.properties. Connector would also
# expect incoming messages to vary in fields number or type,
# which impedes performance
# When false, Connector rejects all records that don't fit
# without further table/data manipulation
# (default = false)
kinetica.schema_evolution.enabled = false

# When Schema Evolution is supported, allows connector to alter
# Kinetica tables by adding new columns.
# This operation (altering table) can be time-consuming (default = false)
# By default new fields are ignored and only recognized fields are inserted
# into database table
kinetica.schema_evolution.add_new_fields_as_columns = false

# When Schema Evolution is supported, allows connector to alter Kinetica
# tables by making fields missing from the record nullable columns in the
# database table.
# This operation (altering table) can be time-consuming (default = false)
# By default missing fields would mean bad data and the record would be
# thrown away instead of modifying underlying table structure.
kinetica.schema_evolution.make_missing_field_nullable = false

