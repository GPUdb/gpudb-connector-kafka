/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kinetica.kafka.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/**
 * Helper class - Autogenerated by avro-tools from schema 
 * Class Employee with embedded schema and access methods
 * Do not edit
 * @author nataliya tairbekov
 *
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -127851424321151337L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.kinetica.kafka\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"joining_date\",\"type\":\"string\"},{\"name\":\"role\",\"type\":[\"null\",\"string\"]},{\"name\":\"dept\",\"type\":[\"null\",\"string\"]},{\"name\":\"salary\",\"type\":\"float\"},{\"name\":\"bonus\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employee to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employee from a ByteBuffer. */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence joining_date;
  @Deprecated public java.lang.CharSequence role;
  @Deprecated public java.lang.CharSequence dept;
  @Deprecated public float salary;
  @Deprecated public float bonus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param joining_date The new value for joining_date
   * @param role The new value for role
   * @param dept The new value for dept
   * @param salary The new value for salary
   * @param bonus The new value for bonus
   */
  public Employee(java.lang.CharSequence name, java.lang.CharSequence joining_date, java.lang.CharSequence role, java.lang.CharSequence dept, java.lang.Float salary, java.lang.Float bonus) {
    this.name = name;
    this.joining_date = joining_date;
    this.role = role;
    this.dept = dept;
    this.salary = salary;
    this.bonus = bonus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return joining_date;
    case 2: return role;
    case 3: return dept;
    case 4: return salary;
    case 5: return bonus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: joining_date = (java.lang.CharSequence)value$; break;
    case 2: role = (java.lang.CharSequence)value$; break;
    case 3: dept = (java.lang.CharSequence)value$; break;
    case 4: salary = (java.lang.Float)value$; break;
    case 5: bonus = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'joining_date' field.
   * @return The value of the 'joining_date' field.
   */
  public java.lang.CharSequence getJoiningDate() {
    return joining_date;
  }

  /**
   * Sets the value of the 'joining_date' field.
   * @param value the value to set.
   */
  public void setJoiningDate(java.lang.CharSequence value) {
    this.joining_date = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public java.lang.CharSequence getRole() {
    return role;
  }

  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.CharSequence value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'dept' field.
   * @return The value of the 'dept' field.
   */
  public java.lang.CharSequence getDept() {
    return dept;
  }

  /**
   * Sets the value of the 'dept' field.
   * @param value the value to set.
   */
  public void setDept(java.lang.CharSequence value) {
    this.dept = value;
  }

  /**
   * Gets the value of the 'salary' field.
   * @return The value of the 'salary' field.
   */
  public java.lang.Float getSalary() {
    return salary;
  }

  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(java.lang.Float value) {
    this.salary = value;
  }

  /**
   * Gets the value of the 'bonus' field.
   * @return The value of the 'bonus' field.
   */
  public java.lang.Float getBonus() {
    return bonus;
  }

  /**
   * Sets the value of the 'bonus' field.
   * @param value the value to set.
   */
  public void setBonus(java.lang.Float value) {
    this.bonus = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static com.kinetica.kafka.data.Employee.Builder newBuilder() {
    return new com.kinetica.kafka.data.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.kinetica.kafka.data.Employee.Builder newBuilder(com.kinetica.kafka.data.Employee.Builder other) {
    return new com.kinetica.kafka.data.Employee.Builder(other);
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.kinetica.kafka.data.Employee.Builder newBuilder(com.kinetica.kafka.data.Employee other) {
    return new com.kinetica.kafka.data.Employee.Builder(other);
  }

  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence joining_date;
    private java.lang.CharSequence role;
    private java.lang.CharSequence dept;
    private float salary;
    private float bonus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kinetica.kafka.data.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.joining_date)) {
        this.joining_date = data().deepCopy(fields()[1].schema(), other.joining_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dept)) {
        this.dept = data().deepCopy(fields()[3].schema(), other.dept);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bonus)) {
        this.bonus = data().deepCopy(fields()[5].schema(), other.bonus);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kinetica.kafka.data.Employee other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.joining_date)) {
        this.joining_date = data().deepCopy(fields()[1].schema(), other.joining_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dept)) {
        this.dept = data().deepCopy(fields()[3].schema(), other.dept);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bonus)) {
        this.bonus = data().deepCopy(fields()[5].schema(), other.bonus);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'joining_date' field.
      * @return The value.
      */
    public java.lang.CharSequence getJoiningDate() {
      return joining_date;
    }

    /**
      * Sets the value of the 'joining_date' field.
      * @param value The value of 'joining_date'.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder setJoiningDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.joining_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'joining_date' field has been set.
      * @return True if the 'joining_date' field has been set, false otherwise.
      */
    public boolean hasJoiningDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'joining_date' field.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder clearJoiningDate() {
      joining_date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public java.lang.CharSequence getRole() {
      return role;
    }

    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder setRole(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.role = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder clearRole() {
      role = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dept' field.
      * @return The value.
      */
    public java.lang.CharSequence getDept() {
      return dept;
    }

    /**
      * Sets the value of the 'dept' field.
      * @param value The value of 'dept'.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder setDept(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.dept = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dept' field has been set.
      * @return True if the 'dept' field has been set, false otherwise.
      */
    public boolean hasDept() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dept' field.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder clearDept() {
      dept = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * @return The value.
      */
    public java.lang.Float getSalary() {
      return salary;
    }

    /**
      * Sets the value of the 'salary' field.
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder setSalary(float value) {
      validate(fields()[4], value);
      this.salary = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'salary' field.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder clearSalary() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bonus' field.
      * @return The value.
      */
    public java.lang.Float getBonus() {
      return bonus;
    }

    /**
      * Sets the value of the 'bonus' field.
      * @param value The value of 'bonus'.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder setBonus(float value) {
      validate(fields()[5], value);
      this.bonus = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bonus' field has been set.
      * @return True if the 'bonus' field has been set, false otherwise.
      */
    public boolean hasBonus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bonus' field.
      * @return This builder.
      */
    public com.kinetica.kafka.data.Employee.Builder clearBonus() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.joining_date = fieldSetFlags()[1] ? this.joining_date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.role = fieldSetFlags()[2] ? this.role : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.dept = fieldSetFlags()[3] ? this.dept : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.salary = fieldSetFlags()[4] ? this.salary : (java.lang.Float) defaultValue(fields()[4]);
        record.bonus = fieldSetFlags()[5] ? this.bonus : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
